{"version":3,"file":"static/js/222.ed7585bd.chunk.js","mappings":"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","sources":["components/ContactsForm/ContactsForm.styled.js","components/ContactsForm/validSchema.js","redux/contacts/selectors.js","components/ContactsForm/ContactsForm.jsx","components/ContactItem/ContactItem.styled.js","components/ContactItem/ContactItem.jsx","components/ContactsList/ContactsList.styled.js","components/ContactsList/ContactsList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Form as FormicForm } from 'formik';\nimport { ErrorMessage as FormicMessage } from 'formik';\nimport { Field as FormicField } from 'formik';\n\nexport const Form = styled(FormicForm)`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  width: 400px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  font-size: 15px;\n`;\n\nexport const Field = styled(FormicField)`\n  border: none;\n`;\n\nexport const Button = styled.button`\n  cursor: pointer;\n  width: 80px;\n  margin-left: auto;\n  padding: 4px;\n  border: none;\n  border-radius: 50px;\n  color: white;\n  background: linear-gradient(145deg, #e63e81, #ff4a99);\n  transition: width 350ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    width: 120px;\n  }\n`;\n\nexport const ErrorMessage = styled(FormicMessage)`\n  color: orangered;\n`;\n","import * as yup from 'yup';\n\nconst patternName =\n  \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\";\nconst messageName =\n  \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\";\n\nconst patternNumber =\n  /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/;\nconst messageNumber =\n  'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +';\n\nexport const schema = yup.object().shape({\n  name: yup.string().required().matches(patternName, messageName),\n  number: yup.string().required().matches(patternNumber, messageNumber),\n});\n","export const getContacts = state => state.contacts.items;\n\nexport const getFilterValue = state => state.filter;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getError = state => state.contacts.error;\n","import { Formik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Form, Label, Field } from './ContactsForm.styled';\nimport { Button, ErrorMessage } from './ContactsForm.styled';\nimport { schema } from './validSchema';\nimport { getContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nexport const ContactsForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleSubmit = (values, { resetForm }) => {\n    const existingContact = contacts.find(\n      contact => contact.name.toLowerCase() === values.name.toLowerCase()\n    );\n\n    if (existingContact) {\n      return alert(`${values.name} is already in contacts`);\n    }\n\n    dispatch(addContact({ ...values }));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={schema}\n    >\n      <Form autoComplete=\"off\">\n        <Label htmlFor=\"name\">\n          Name\n          <Field type=\"text\" name=\"name\" />\n          <ErrorMessage name=\"name\" component=\"div\" />\n        </Label>\n\n        <Label htmlFor=\"number\">\n          Number\n          <Field type=\"tel\" name=\"number\" />\n          <ErrorMessage name=\"number\" component=\"div\" />\n        </Label>\n        <Button type=\"submit\">Create</Button>\n      </Form>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Contact = styled.li`\n  min-width: 210px;\n  padding: 5px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 10px;\n  border-radius: 10px;\n  background: linear-gradient(145deg, #e63e81, #ff4a99);\n`;\nexport const ContactInfo = styled.div`\n  display: flex;\n  gap: 15px;\n`;\nexport const Button = styled.button`\n  cursor: pointer;\n  padding-top: 4px;\n  background-color: inherit;\n  color: white;\n  border: none;\n\n  &:hover {\n    color: red;\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { Contact, Button, ContactInfo } from './ContactItem.styled';\nimport PropTypes from 'prop-types';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { AiOutlineDelete } from 'react-icons/ai';\nexport const ContactItem = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <Contact>\n      <ContactInfo>\n        <p>{name}</p>\n        <p>{number}</p>\n      </ContactInfo>\n\n      <Button type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n        <AiOutlineDelete />\n      </Button>\n    </Contact>\n  );\n};\n\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  margin-top: 40px;\n  margin-bottom: 15px;\n\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { ContactItem } from '../ContactItem/ContactItem';\nimport {\n  getContacts,\n  getError,\n  getFilterValue,\n  getIsLoading,\n} from 'redux/contacts/selectors';\nimport { List } from './ContactsList.styled';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nexport const ContactsList = () => {\n  const dispatch = useDispatch();\n  let contacts = useSelector(getContacts);\n  const contactFilter = useSelector(getFilterValue);\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  if (contactFilter.length) {\n    const lowerCasedFilter = contactFilter.toLowerCase();\n    contacts = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(lowerCasedFilter)\n    );\n  }\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <>\n      {isLoading && <p>Loading...</p>}\n      {error && <p>{error}</p>}\n      <List>\n        {contacts.map(({ id, name, number }) => (\n          <ContactItem key={id} name={name} number={number} id={id} />\n        ))}\n      </List>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Input = styled.input`\n  font-size: 12px;\n  padding: 5px 25px;\n  border: none;\n`;\n","import { useDispatch } from 'react-redux';\nimport { filterValue } from 'redux/contacts/filterSlice';\nimport { Input } from './Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const onInput = e => {\n    dispatch(filterValue(e.target.value));\n  };\n\n  return (\n    <div>\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        onInput={onInput}\n        placeholder=\"Search by name...\"\n      />\n    </div>\n  );\n};\n","import { ContactsForm } from 'components/ContactsForm/ContactsForm';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\nimport { Filter } from 'components/Filter/Filter';\n\nexport function ContactsPage() {\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactsForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactsList />\n    </div>\n  );\n}\n"],"names":["Form","styled","FormicForm","Label","Field","FormicField","Button","ErrorMessage","FormicMessage","schema","yup","shape","name","required","matches","number","getContacts","state","contacts","items","getFilterValue","filter","getIsLoading","isLoading","getError","error","initialValues","ContactsForm","dispatch","useDispatch","useSelector","onSubmit","values","resetForm","find","contact","toLowerCase","alert","addContact","validationSchema","autoComplete","htmlFor","type","component","Contact","ContactInfo","ContactItem","id","onClick","deleteContact","List","ContactsList","contactFilter","length","lowerCasedFilter","includes","useEffect","fetchContacts","map","Input","Filter","onInput","e","filterValue","target","value","placeholder","ContactsPage"],"sourceRoot":""}